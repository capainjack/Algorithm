#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
#include<iterator>
#include<set>
#include<stdlib.h>
#include<time.h>
#include<string.h>
#include<string>
#include<queue>
#include<stack>
#include<algorithm>

using namespace std;
bool cmp(int a, int b) {
	return a > b;
}
	//char str1[50] = "Thank";
	//char str2[50] = "you for your smile.";
	//strcpy(str1, str2);
	//puts(str1);

	//string str = "abcd";
	//for (int i = 0; i <= str.length(); i++) {
	//	printf("%c", str[i]);
	//}
	//string::iterator it;
	//for (string::iterator it = str.begin(); it != str.end(); it++) {
	//	printf("%c ", *it);
	//}
	//string的加法
	//string str1 = "abc", str2 = "xyz", str3;
	//str3 = str1 + str2;
	//str1 = str1 + str2;
	//cout << str1 << endl;
	//cout << str3 << endl;
	/*string str1 = "aa", str2 = "aaa", str3 = "abc", str4 = "xyz";
	if (str1 <= str2)
		printf("ok1\n");
	if(str1!=str3)
		printf("ok2\n");*/
	/*	string str1 = "Thank you for your smile.";
		string str2 = "you";
		string str3 = "me";
		if(str1.find(str2)!=string ::npos)
			cout << str1.find(str2) << endl;
		if (str1.find(str2,7) != string::npos)
			cout << str1.find(str2,7) << endl;*/
	//string str1 = "123456";
	//string str2 = "abc";
	//str1.replace(0, 4, str2);
	//cout << str1 << endl;
	//queue<int> q;
	//for (int i = 1; i <= 5; i++) {
	//	q.push(i);
	//}
	//for (int i = 0; i < 3; i++) {
	//	q.pop();
	//}
	//printf("%d\n", q.front());
	//全排列:
	//vector<int>vec;
	//for(int i=1;i<=3;i++)
	//vec.push_back(i);
	//do {
	//	printf("%d%d%d\n", vec[0], vec[1], vec[2]);
	//} while (next_permutation(vec.begin(),vec.end()));
	//int a[] = { 3,1,4,2 };
	//sort(a, a + 4, cmp);
	//for (int i = 0; i < 4; i++) {
	//	printf("%d", a[i]);
	//}
//	int a[20] = { 1,2,3,4,5,6,7,8,9,10,11,12,13 };
//	bool vis[20];
//	int b[20];
//	void dfs(int s, int f) {
//		if (s == f) {
//			for (int i = 0; i < t; i++)
//				cout << b[i] << " ";
//			cout << endl;
//			return;
//		}
//for (int i = 0; i < t; i++) {
//			if (!vis[i]){
//				vis[i] = true;
//				b[s] = a[i];
//				dfs(s + 1, t);
//				vis[i] = false;
//			}
//	   }
//	}
	const int n = 10;
	char mp[n + 2][n + 2];
	bool vis[n + 2][n + 2];
	int ans = 0;
	int cnt = 0;
	bool dfs(int i, int j) {
		if (i<0 || i>n - 1 || j<0 || j>n - 1)
			return true;
		if (vis[i][j])
			return false;
		cnt++;
		vis[i][j] = true;
		if (mp[i][j] == 'L')return dfs(i, j - 1);
		if (mp[i][j] == 'R')return dfs(i, j + 1);
		if (mp[i][j] == 'U')return dfs(i-1, j );
		if (mp[i][j] == 'D')return dfs(i+1, j );
	}